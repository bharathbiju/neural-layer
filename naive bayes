{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled21.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/bharathbiju/neural-layer/blob/one-run-jason/naive%20bayes\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CzS8HVkOygXV",
        "colab_type": "code",
        "outputId": "d7eb1c8e-1081-4028-f728-599c83471df6",
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7Ci8vIE1heCBhbW91bnQgb2YgdGltZSB0byBibG9jayB3YWl0aW5nIGZvciB0aGUgdXNlci4KY29uc3QgRklMRV9DSEFOR0VfVElNRU9VVF9NUyA9IDMwICogMTAwMDsKCmZ1bmN0aW9uIF91cGxvYWRGaWxlcyhpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IHN0ZXBzID0gdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKTsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIC8vIENhY2hlIHN0ZXBzIG9uIHRoZSBvdXRwdXRFbGVtZW50IHRvIG1ha2UgaXQgYXZhaWxhYmxlIGZvciB0aGUgbmV4dCBjYWxsCiAgLy8gdG8gdXBsb2FkRmlsZXNDb250aW51ZSBmcm9tIFB5dGhvbi4KICBvdXRwdXRFbGVtZW50LnN0ZXBzID0gc3RlcHM7CgogIHJldHVybiBfdXBsb2FkRmlsZXNDb250aW51ZShvdXRwdXRJZCk7Cn0KCi8vIFRoaXMgaXMgcm91Z2hseSBhbiBhc3luYyBnZW5lcmF0b3IgKG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGJyb3dzZXIgeWV0KSwKLy8gd2hlcmUgdGhlcmUgYXJlIG11bHRpcGxlIGFzeW5jaHJvbm91cyBzdGVwcyBhbmQgdGhlIFB5dGhvbiBzaWRlIGlzIGdvaW5nCi8vIHRvIHBvbGwgZm9yIGNvbXBsZXRpb24gb2YgZWFjaCBzdGVwLgovLyBUaGlzIHVzZXMgYSBQcm9taXNlIHRvIGJsb2NrIHRoZSBweXRob24gc2lkZSBvbiBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcCwKLy8gdGhlbiBwYXNzZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJldmlvdXMgc3RlcCBhcyB0aGUgaW5wdXQgdG8gdGhlIG5leHQgc3RlcC4KZnVuY3Rpb24gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpIHsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIGNvbnN0IHN0ZXBzID0gb3V0cHV0RWxlbWVudC5zdGVwczsKCiAgY29uc3QgbmV4dCA9IHN0ZXBzLm5leHQob3V0cHV0RWxlbWVudC5sYXN0UHJvbWlzZVZhbHVlKTsKICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5leHQudmFsdWUucHJvbWlzZSkudGhlbigodmFsdWUpID0+IHsKICAgIC8vIENhY2hlIHRoZSBsYXN0IHByb21pc2UgdmFsdWUgdG8gbWFrZSBpdCBhdmFpbGFibGUgdG8gdGhlIG5leHQKICAgIC8vIHN0ZXAgb2YgdGhlIGdlbmVyYXRvci4KICAgIG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSA9IHZhbHVlOwogICAgcmV0dXJuIG5leHQudmFsdWUucmVzcG9uc2U7CiAgfSk7Cn0KCi8qKgogKiBHZW5lcmF0b3IgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGJldHdlZW4gZWFjaCBhc3luYyBzdGVwIG9mIHRoZSB1cGxvYWQKICogcHJvY2Vzcy4KICogQHBhcmFtIHtzdHJpbmd9IGlucHV0SWQgRWxlbWVudCBJRCBvZiB0aGUgaW5wdXQgZmlsZSBwaWNrZXIgZWxlbWVudC4KICogQHBhcmFtIHtzdHJpbmd9IG91dHB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIG91dHB1dCBkaXNwbGF5LgogKiBAcmV0dXJuIHshSXRlcmFibGU8IU9iamVjdD59IEl0ZXJhYmxlIG9mIG5leHQgc3RlcHMuCiAqLwpmdW5jdGlvbiogdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKSB7CiAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW5wdXRJZCk7CiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gZmFsc2U7CgogIGNvbnN0IG91dHB1dEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvdXRwdXRJZCk7CiAgb3V0cHV0RWxlbWVudC5pbm5lckhUTUwgPSAnJzsKCiAgY29uc3QgcGlja2VkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHsKICAgICAgcmVzb2x2ZShlLnRhcmdldC5maWxlcyk7CiAgICB9KTsKICB9KTsKCiAgY29uc3QgY2FuY2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7CiAgaW5wdXRFbGVtZW50LnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2FuY2VsKTsKICBjYW5jZWwudGV4dENvbnRlbnQgPSAnQ2FuY2VsIHVwbG9hZCc7CiAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBjYW5jZWwub25jbGljayA9ICgpID0+IHsKICAgICAgcmVzb2x2ZShudWxsKTsKICAgIH07CiAgfSk7CgogIC8vIENhbmNlbCB1cGxvYWQgaWYgdXNlciBoYXNuJ3QgcGlja2VkIGFueXRoaW5nIGluIHRpbWVvdXQuCiAgY29uc3QgdGltZW91dFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9LCBGSUxFX0NIQU5HRV9USU1FT1VUX01TKTsKICB9KTsKCiAgLy8gV2FpdCBmb3IgdGhlIHVzZXIgdG8gcGljayB0aGUgZmlsZXMuCiAgY29uc3QgZmlsZXMgPSB5aWVsZCB7CiAgICBwcm9taXNlOiBQcm9taXNlLnJhY2UoW3BpY2tlZFByb21pc2UsIHRpbWVvdXRQcm9taXNlLCBjYW5jZWxQcm9taXNlXSksCiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdzdGFydGluZycsCiAgICB9CiAgfTsKCiAgaWYgKCFmaWxlcykgewogICAgcmV0dXJuIHsKICAgICAgcmVzcG9uc2U6IHsKICAgICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICAgIH0KICAgIH07CiAgfQoKICBjYW5jZWwucmVtb3ZlKCk7CgogIC8vIERpc2FibGUgdGhlIGlucHV0IGVsZW1lbnQgc2luY2UgZnVydGhlciBwaWNrcyBhcmUgbm90IGFsbG93ZWQuCiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gdHJ1ZTsKCiAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7CiAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICBsaS5hcHBlbmQoc3BhbihmaWxlLm5hbWUsIHtmb250V2VpZ2h0OiAnYm9sZCd9KSk7CiAgICBsaS5hcHBlbmQoc3BhbigKICAgICAgICBgKCR7ZmlsZS50eXBlIHx8ICduL2EnfSkgLSAke2ZpbGUuc2l6ZX0gYnl0ZXMsIGAgKwogICAgICAgIGBsYXN0IG1vZGlmaWVkOiAkewogICAgICAgICAgICBmaWxlLmxhc3RNb2RpZmllZERhdGUgPyBmaWxlLmxhc3RNb2RpZmllZERhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCkgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbi9hJ30gLSBgKSk7CiAgICBjb25zdCBwZXJjZW50ID0gc3BhbignMCUgZG9uZScpOwogICAgbGkuYXBwZW5kQ2hpbGQocGVyY2VudCk7CgogICAgb3V0cHV0RWxlbWVudC5hcHBlbmRDaGlsZChsaSk7CgogICAgY29uc3QgZmlsZURhdGFQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgcmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7CiAgICAgICAgcmVzb2x2ZShlLnRhcmdldC5yZXN1bHQpOwogICAgICB9OwogICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7CiAgICB9KTsKICAgIC8vIFdhaXQgZm9yIHRoZSBkYXRhIHRvIGJlIHJlYWR5LgogICAgbGV0IGZpbGVEYXRhID0geWllbGQgewogICAgICBwcm9taXNlOiBmaWxlRGF0YVByb21pc2UsCiAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgYWN0aW9uOiAnY29udGludWUnLAogICAgICB9CiAgICB9OwoKICAgIC8vIFVzZSBhIGNodW5rZWQgc2VuZGluZyB0byBhdm9pZCBtZXNzYWdlIHNpemUgbGltaXRzLiBTZWUgYi82MjExNTY2MC4KICAgIGxldCBwb3NpdGlvbiA9IDA7CiAgICB3aGlsZSAocG9zaXRpb24gPCBmaWxlRGF0YS5ieXRlTGVuZ3RoKSB7CiAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWluKGZpbGVEYXRhLmJ5dGVMZW5ndGggLSBwb3NpdGlvbiwgTUFYX1BBWUxPQURfU0laRSk7CiAgICAgIGNvbnN0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoZmlsZURhdGEsIHBvc2l0aW9uLCBsZW5ndGgpOwogICAgICBwb3NpdGlvbiArPSBsZW5ndGg7CgogICAgICBjb25zdCBiYXNlNjQgPSBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY2h1bmspKTsKICAgICAgeWllbGQgewogICAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgICBhY3Rpb246ICdhcHBlbmQnLAogICAgICAgICAgZmlsZTogZmlsZS5uYW1lLAogICAgICAgICAgZGF0YTogYmFzZTY0LAogICAgICAgIH0sCiAgICAgIH07CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPQogICAgICAgICAgYCR7TWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCl9JSBkb25lYDsKICAgIH0KICB9CgogIC8vIEFsbCBkb25lLgogIHlpZWxkIHsKICAgIHJlc3BvbnNlOiB7CiAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgIH0KICB9Owp9CgpzY29wZS5nb29nbGUgPSBzY29wZS5nb29nbGUgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYiA9IHNjb3BlLmdvb2dsZS5jb2xhYiB8fCB7fTsKc2NvcGUuZ29vZ2xlLmNvbGFiLl9maWxlcyA9IHsKICBfdXBsb2FkRmlsZXMsCiAgX3VwbG9hZEZpbGVzQ29udGludWUsCn07Cn0pKHNlbGYpOwo=",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": "OK"
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 82
        }
      },
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-79d9ebf1-14dc-4bc1-a6a0-736f69f3dc31\" name=\"files[]\" multiple disabled />\n",
              "     <output id=\"result-79d9ebf1-14dc-4bc1-a6a0-736f69f3dc31\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Saving 10th-naivebayes.csv to 10th-naivebayes.csv\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R8oJUkvudKiN",
        "colab_type": "code",
        "outputId": "098b30b2-ac80-410f-e98e-4e29a23c969a",
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7Ci8vIE1heCBhbW91bnQgb2YgdGltZSB0byBibG9jayB3YWl0aW5nIGZvciB0aGUgdXNlci4KY29uc3QgRklMRV9DSEFOR0VfVElNRU9VVF9NUyA9IDMwICogMTAwMDsKCmZ1bmN0aW9uIF91cGxvYWRGaWxlcyhpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IHN0ZXBzID0gdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKTsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIC8vIENhY2hlIHN0ZXBzIG9uIHRoZSBvdXRwdXRFbGVtZW50IHRvIG1ha2UgaXQgYXZhaWxhYmxlIGZvciB0aGUgbmV4dCBjYWxsCiAgLy8gdG8gdXBsb2FkRmlsZXNDb250aW51ZSBmcm9tIFB5dGhvbi4KICBvdXRwdXRFbGVtZW50LnN0ZXBzID0gc3RlcHM7CgogIHJldHVybiBfdXBsb2FkRmlsZXNDb250aW51ZShvdXRwdXRJZCk7Cn0KCi8vIFRoaXMgaXMgcm91Z2hseSBhbiBhc3luYyBnZW5lcmF0b3IgKG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGJyb3dzZXIgeWV0KSwKLy8gd2hlcmUgdGhlcmUgYXJlIG11bHRpcGxlIGFzeW5jaHJvbm91cyBzdGVwcyBhbmQgdGhlIFB5dGhvbiBzaWRlIGlzIGdvaW5nCi8vIHRvIHBvbGwgZm9yIGNvbXBsZXRpb24gb2YgZWFjaCBzdGVwLgovLyBUaGlzIHVzZXMgYSBQcm9taXNlIHRvIGJsb2NrIHRoZSBweXRob24gc2lkZSBvbiBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcCwKLy8gdGhlbiBwYXNzZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJldmlvdXMgc3RlcCBhcyB0aGUgaW5wdXQgdG8gdGhlIG5leHQgc3RlcC4KZnVuY3Rpb24gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpIHsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIGNvbnN0IHN0ZXBzID0gb3V0cHV0RWxlbWVudC5zdGVwczsKCiAgY29uc3QgbmV4dCA9IHN0ZXBzLm5leHQob3V0cHV0RWxlbWVudC5sYXN0UHJvbWlzZVZhbHVlKTsKICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5leHQudmFsdWUucHJvbWlzZSkudGhlbigodmFsdWUpID0+IHsKICAgIC8vIENhY2hlIHRoZSBsYXN0IHByb21pc2UgdmFsdWUgdG8gbWFrZSBpdCBhdmFpbGFibGUgdG8gdGhlIG5leHQKICAgIC8vIHN0ZXAgb2YgdGhlIGdlbmVyYXRvci4KICAgIG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSA9IHZhbHVlOwogICAgcmV0dXJuIG5leHQudmFsdWUucmVzcG9uc2U7CiAgfSk7Cn0KCi8qKgogKiBHZW5lcmF0b3IgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGJldHdlZW4gZWFjaCBhc3luYyBzdGVwIG9mIHRoZSB1cGxvYWQKICogcHJvY2Vzcy4KICogQHBhcmFtIHtzdHJpbmd9IGlucHV0SWQgRWxlbWVudCBJRCBvZiB0aGUgaW5wdXQgZmlsZSBwaWNrZXIgZWxlbWVudC4KICogQHBhcmFtIHtzdHJpbmd9IG91dHB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIG91dHB1dCBkaXNwbGF5LgogKiBAcmV0dXJuIHshSXRlcmFibGU8IU9iamVjdD59IEl0ZXJhYmxlIG9mIG5leHQgc3RlcHMuCiAqLwpmdW5jdGlvbiogdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKSB7CiAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW5wdXRJZCk7CiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gZmFsc2U7CgogIGNvbnN0IG91dHB1dEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvdXRwdXRJZCk7CiAgb3V0cHV0RWxlbWVudC5pbm5lckhUTUwgPSAnJzsKCiAgY29uc3QgcGlja2VkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHsKICAgICAgcmVzb2x2ZShlLnRhcmdldC5maWxlcyk7CiAgICB9KTsKICB9KTsKCiAgY29uc3QgY2FuY2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7CiAgaW5wdXRFbGVtZW50LnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2FuY2VsKTsKICBjYW5jZWwudGV4dENvbnRlbnQgPSAnQ2FuY2VsIHVwbG9hZCc7CiAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBjYW5jZWwub25jbGljayA9ICgpID0+IHsKICAgICAgcmVzb2x2ZShudWxsKTsKICAgIH07CiAgfSk7CgogIC8vIENhbmNlbCB1cGxvYWQgaWYgdXNlciBoYXNuJ3QgcGlja2VkIGFueXRoaW5nIGluIHRpbWVvdXQuCiAgY29uc3QgdGltZW91dFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9LCBGSUxFX0NIQU5HRV9USU1FT1VUX01TKTsKICB9KTsKCiAgLy8gV2FpdCBmb3IgdGhlIHVzZXIgdG8gcGljayB0aGUgZmlsZXMuCiAgY29uc3QgZmlsZXMgPSB5aWVsZCB7CiAgICBwcm9taXNlOiBQcm9taXNlLnJhY2UoW3BpY2tlZFByb21pc2UsIHRpbWVvdXRQcm9taXNlLCBjYW5jZWxQcm9taXNlXSksCiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdzdGFydGluZycsCiAgICB9CiAgfTsKCiAgaWYgKCFmaWxlcykgewogICAgcmV0dXJuIHsKICAgICAgcmVzcG9uc2U6IHsKICAgICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICAgIH0KICAgIH07CiAgfQoKICBjYW5jZWwucmVtb3ZlKCk7CgogIC8vIERpc2FibGUgdGhlIGlucHV0IGVsZW1lbnQgc2luY2UgZnVydGhlciBwaWNrcyBhcmUgbm90IGFsbG93ZWQuCiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gdHJ1ZTsKCiAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7CiAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICBsaS5hcHBlbmQoc3BhbihmaWxlLm5hbWUsIHtmb250V2VpZ2h0OiAnYm9sZCd9KSk7CiAgICBsaS5hcHBlbmQoc3BhbigKICAgICAgICBgKCR7ZmlsZS50eXBlIHx8ICduL2EnfSkgLSAke2ZpbGUuc2l6ZX0gYnl0ZXMsIGAgKwogICAgICAgIGBsYXN0IG1vZGlmaWVkOiAkewogICAgICAgICAgICBmaWxlLmxhc3RNb2RpZmllZERhdGUgPyBmaWxlLmxhc3RNb2RpZmllZERhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCkgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbi9hJ30gLSBgKSk7CiAgICBjb25zdCBwZXJjZW50ID0gc3BhbignMCUgZG9uZScpOwogICAgbGkuYXBwZW5kQ2hpbGQocGVyY2VudCk7CgogICAgb3V0cHV0RWxlbWVudC5hcHBlbmRDaGlsZChsaSk7CgogICAgY29uc3QgZmlsZURhdGFQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgcmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7CiAgICAgICAgcmVzb2x2ZShlLnRhcmdldC5yZXN1bHQpOwogICAgICB9OwogICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7CiAgICB9KTsKICAgIC8vIFdhaXQgZm9yIHRoZSBkYXRhIHRvIGJlIHJlYWR5LgogICAgbGV0IGZpbGVEYXRhID0geWllbGQgewogICAgICBwcm9taXNlOiBmaWxlRGF0YVByb21pc2UsCiAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgYWN0aW9uOiAnY29udGludWUnLAogICAgICB9CiAgICB9OwoKICAgIC8vIFVzZSBhIGNodW5rZWQgc2VuZGluZyB0byBhdm9pZCBtZXNzYWdlIHNpemUgbGltaXRzLiBTZWUgYi82MjExNTY2MC4KICAgIGxldCBwb3NpdGlvbiA9IDA7CiAgICB3aGlsZSAocG9zaXRpb24gPCBmaWxlRGF0YS5ieXRlTGVuZ3RoKSB7CiAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWluKGZpbGVEYXRhLmJ5dGVMZW5ndGggLSBwb3NpdGlvbiwgTUFYX1BBWUxPQURfU0laRSk7CiAgICAgIGNvbnN0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoZmlsZURhdGEsIHBvc2l0aW9uLCBsZW5ndGgpOwogICAgICBwb3NpdGlvbiArPSBsZW5ndGg7CgogICAgICBjb25zdCBiYXNlNjQgPSBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY2h1bmspKTsKICAgICAgeWllbGQgewogICAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgICBhY3Rpb246ICdhcHBlbmQnLAogICAgICAgICAgZmlsZTogZmlsZS5uYW1lLAogICAgICAgICAgZGF0YTogYmFzZTY0LAogICAgICAgIH0sCiAgICAgIH07CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPQogICAgICAgICAgYCR7TWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCl9JSBkb25lYDsKICAgIH0KICB9CgogIC8vIEFsbCBkb25lLgogIHlpZWxkIHsKICAgIHJlc3BvbnNlOiB7CiAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgIH0KICB9Owp9CgpzY29wZS5nb29nbGUgPSBzY29wZS5nb29nbGUgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYiA9IHNjb3BlLmdvb2dsZS5jb2xhYiB8fCB7fTsKc2NvcGUuZ29vZ2xlLmNvbGFiLl9maWxlcyA9IHsKICBfdXBsb2FkRmlsZXMsCiAgX3VwbG9hZEZpbGVzQ29udGludWUsCn07Cn0pKHNlbGYpOwo=",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": "OK"
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 65
        }
      },
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-c72bfe4f-ed58-4dd8-93ca-f0e7baebcd9c\" name=\"files[]\" multiple disabled />\n",
              "     <output id=\"result-c72bfe4f-ed58-4dd8-93ca-f0e7baebcd9c\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VIzRwa2r00jT",
        "colab_type": "code",
        "outputId": "025ca0dd-81a5-44ad-8818-ce302aa02b7f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "import pandas as pd \n",
        "import json\n",
        "dict={}\n",
        "dlist=[]\n",
        "data = pd.read_csv(\"10th-naivebayes.csv\") \n",
        "X=data.iloc[:,:-1]\n",
        "y= data.iloc[:,-1]\n",
        "from sklearn.model_selection import train_test_split \n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=2)\n",
        "from sklearn.naive_bayes import GaussianNB \n",
        "\n",
        "gnb = GaussianNB() \n",
        "gnb.fit(X_train, y_train) \n",
        "y_pred = gnb.predict(X_test) \n",
        "from sklearn import metrics \n",
        "\n",
        "\n",
        "count=0\n",
        "# A Python program to print all combinations \n",
        "# with an element-to-itself combination is  \n",
        "# also included \n",
        "from itertools import combinations_with_replacement \n",
        "  \n",
        "# Get all combinations of [1, 2, 3] and length 2 \n",
        "comb = combinations_with_replacement([40,50, 60,70,80,90,100], 5) # Print the obtained combinations \n",
        "for marks in list(comb): \n",
        "  y_pred = gnb.predict([marks])\n",
        "  dict.update([ ('input', str(marks)) , ('output', y_pred[0])] )\n",
        "  dlist.append(dict)\n",
        "  print(dict,count)\n",
        "  count=count+1\n",
        "  dict={}\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'input': '(40, 40, 40, 40, 40)', 'output': 'g3'} 0\n",
            "{'input': '(40, 40, 40, 40, 50)', 'output': 'g3'} 1\n",
            "{'input': '(40, 40, 40, 40, 60)', 'output': 'g3'} 2\n",
            "{'input': '(40, 40, 40, 40, 70)', 'output': 'g3'} 3\n",
            "{'input': '(40, 40, 40, 40, 80)', 'output': 'g3'} 4\n",
            "{'input': '(40, 40, 40, 40, 90)', 'output': 'g3'} 5\n",
            "{'input': '(40, 40, 40, 40, 100)', 'output': 'g3'} 6\n",
            "{'input': '(40, 40, 40, 50, 50)', 'output': 'g3'} 7\n",
            "{'input': '(40, 40, 40, 50, 60)', 'output': 'g3'} 8\n",
            "{'input': '(40, 40, 40, 50, 70)', 'output': 'g3'} 9\n",
            "{'input': '(40, 40, 40, 50, 80)', 'output': 'g3'} 10\n",
            "{'input': '(40, 40, 40, 50, 90)', 'output': 'g3'} 11\n",
            "{'input': '(40, 40, 40, 50, 100)', 'output': 'g3'} 12\n",
            "{'input': '(40, 40, 40, 60, 60)', 'output': 'g3'} 13\n",
            "{'input': '(40, 40, 40, 60, 70)', 'output': 'g3'} 14\n",
            "{'input': '(40, 40, 40, 60, 80)', 'output': 'g3'} 15\n",
            "{'input': '(40, 40, 40, 60, 90)', 'output': 'g3'} 16\n",
            "{'input': '(40, 40, 40, 60, 100)', 'output': 'g3'} 17\n",
            "{'input': '(40, 40, 40, 70, 70)', 'output': 'g3'} 18\n",
            "{'input': '(40, 40, 40, 70, 80)', 'output': 'g3'} 19\n",
            "{'input': '(40, 40, 40, 70, 90)', 'output': 'g3'} 20\n",
            "{'input': '(40, 40, 40, 70, 100)', 'output': 'g3'} 21\n",
            "{'input': '(40, 40, 40, 80, 80)', 'output': 'g3'} 22\n",
            "{'input': '(40, 40, 40, 80, 90)', 'output': 'g3'} 23\n",
            "{'input': '(40, 40, 40, 80, 100)', 'output': 'g3'} 24\n",
            "{'input': '(40, 40, 40, 90, 90)', 'output': 'g3'} 25\n",
            "{'input': '(40, 40, 40, 90, 100)', 'output': 'g3'} 26\n",
            "{'input': '(40, 40, 40, 100, 100)', 'output': 'g3'} 27\n",
            "{'input': '(40, 40, 50, 50, 50)', 'output': 'g3'} 28\n",
            "{'input': '(40, 40, 50, 50, 60)', 'output': 'g3'} 29\n",
            "{'input': '(40, 40, 50, 50, 70)', 'output': 'g3'} 30\n",
            "{'input': '(40, 40, 50, 50, 80)', 'output': 'g3'} 31\n",
            "{'input': '(40, 40, 50, 50, 90)', 'output': 'g3'} 32\n",
            "{'input': '(40, 40, 50, 50, 100)', 'output': 'g3'} 33\n",
            "{'input': '(40, 40, 50, 60, 60)', 'output': 'g3'} 34\n",
            "{'input': '(40, 40, 50, 60, 70)', 'output': 'g3'} 35\n",
            "{'input': '(40, 40, 50, 60, 80)', 'output': 'g3'} 36\n",
            "{'input': '(40, 40, 50, 60, 90)', 'output': 'g3'} 37\n",
            "{'input': '(40, 40, 50, 60, 100)', 'output': 'g3'} 38\n",
            "{'input': '(40, 40, 50, 70, 70)', 'output': 'g3'} 39\n",
            "{'input': '(40, 40, 50, 70, 80)', 'output': 'g3'} 40\n",
            "{'input': '(40, 40, 50, 70, 90)', 'output': 'g3'} 41\n",
            "{'input': '(40, 40, 50, 70, 100)', 'output': 'g3'} 42\n",
            "{'input': '(40, 40, 50, 80, 80)', 'output': 'g3'} 43\n",
            "{'input': '(40, 40, 50, 80, 90)', 'output': 'g3'} 44\n",
            "{'input': '(40, 40, 50, 80, 100)', 'output': 'g3'} 45\n",
            "{'input': '(40, 40, 50, 90, 90)', 'output': 'g3'} 46\n",
            "{'input': '(40, 40, 50, 90, 100)', 'output': 'g3'} 47\n",
            "{'input': '(40, 40, 50, 100, 100)', 'output': 'g3'} 48\n",
            "{'input': '(40, 40, 60, 60, 60)', 'output': 'g3'} 49\n",
            "{'input': '(40, 40, 60, 60, 70)', 'output': 'g3'} 50\n",
            "{'input': '(40, 40, 60, 60, 80)', 'output': 'g3'} 51\n",
            "{'input': '(40, 40, 60, 60, 90)', 'output': 'g3'} 52\n",
            "{'input': '(40, 40, 60, 60, 100)', 'output': 'g3'} 53\n",
            "{'input': '(40, 40, 60, 70, 70)', 'output': 'g3'} 54\n",
            "{'input': '(40, 40, 60, 70, 80)', 'output': 'g3'} 55\n",
            "{'input': '(40, 40, 60, 70, 90)', 'output': 'g3'} 56\n",
            "{'input': '(40, 40, 60, 70, 100)', 'output': 'g3'} 57\n",
            "{'input': '(40, 40, 60, 80, 80)', 'output': 'g3'} 58\n",
            "{'input': '(40, 40, 60, 80, 90)', 'output': 'g3'} 59\n",
            "{'input': '(40, 40, 60, 80, 100)', 'output': 'g3'} 60\n",
            "{'input': '(40, 40, 60, 90, 90)', 'output': 'g3'} 61\n",
            "{'input': '(40, 40, 60, 90, 100)', 'output': 'g3'} 62\n",
            "{'input': '(40, 40, 60, 100, 100)', 'output': 'g3'} 63\n",
            "{'input': '(40, 40, 70, 70, 70)', 'output': 'g3'} 64\n",
            "{'input': '(40, 40, 70, 70, 80)', 'output': 'g3'} 65\n",
            "{'input': '(40, 40, 70, 70, 90)', 'output': 'g3'} 66\n",
            "{'input': '(40, 40, 70, 70, 100)', 'output': 'g3'} 67\n",
            "{'input': '(40, 40, 70, 80, 80)', 'output': 'g3'} 68\n",
            "{'input': '(40, 40, 70, 80, 90)', 'output': 'g3'} 69\n",
            "{'input': '(40, 40, 70, 80, 100)', 'output': 'g3'} 70\n",
            "{'input': '(40, 40, 70, 90, 90)', 'output': 'g3'} 71\n",
            "{'input': '(40, 40, 70, 90, 100)', 'output': 'g3'} 72\n",
            "{'input': '(40, 40, 70, 100, 100)', 'output': 'g3'} 73\n",
            "{'input': '(40, 40, 80, 80, 80)', 'output': 'g3'} 74\n",
            "{'input': '(40, 40, 80, 80, 90)', 'output': 'g3'} 75\n",
            "{'input': '(40, 40, 80, 80, 100)', 'output': 'g3'} 76\n",
            "{'input': '(40, 40, 80, 90, 90)', 'output': 'g3'} 77\n",
            "{'input': '(40, 40, 80, 90, 100)', 'output': 'g3'} 78\n",
            "{'input': '(40, 40, 80, 100, 100)', 'output': 'g3'} 79\n",
            "{'input': '(40, 40, 90, 90, 90)', 'output': 'g3'} 80\n",
            "{'input': '(40, 40, 90, 90, 100)', 'output': 'g3'} 81\n",
            "{'input': '(40, 40, 90, 100, 100)', 'output': 'g3'} 82\n",
            "{'input': '(40, 40, 100, 100, 100)', 'output': 'g3'} 83\n",
            "{'input': '(40, 50, 50, 50, 50)', 'output': 'g3'} 84\n",
            "{'input': '(40, 50, 50, 50, 60)', 'output': 'g3'} 85\n",
            "{'input': '(40, 50, 50, 50, 70)', 'output': 'g3'} 86\n",
            "{'input': '(40, 50, 50, 50, 80)', 'output': 'g3'} 87\n",
            "{'input': '(40, 50, 50, 50, 90)', 'output': 'g3'} 88\n",
            "{'input': '(40, 50, 50, 50, 100)', 'output': 'g3'} 89\n",
            "{'input': '(40, 50, 50, 60, 60)', 'output': 'g3'} 90\n",
            "{'input': '(40, 50, 50, 60, 70)', 'output': 'g3'} 91\n",
            "{'input': '(40, 50, 50, 60, 80)', 'output': 'g3'} 92\n",
            "{'input': '(40, 50, 50, 60, 90)', 'output': 'g3'} 93\n",
            "{'input': '(40, 50, 50, 60, 100)', 'output': 'g3'} 94\n",
            "{'input': '(40, 50, 50, 70, 70)', 'output': 'g3'} 95\n",
            "{'input': '(40, 50, 50, 70, 80)', 'output': 'g3'} 96\n",
            "{'input': '(40, 50, 50, 70, 90)', 'output': 'g3'} 97\n",
            "{'input': '(40, 50, 50, 70, 100)', 'output': 'g3'} 98\n",
            "{'input': '(40, 50, 50, 80, 80)', 'output': 'g3'} 99\n",
            "{'input': '(40, 50, 50, 80, 90)', 'output': 'g3'} 100\n",
            "{'input': '(40, 50, 50, 80, 100)', 'output': 'g3'} 101\n",
            "{'input': '(40, 50, 50, 90, 90)', 'output': 'g3'} 102\n",
            "{'input': '(40, 50, 50, 90, 100)', 'output': 'g3'} 103\n",
            "{'input': '(40, 50, 50, 100, 100)', 'output': 'g3'} 104\n",
            "{'input': '(40, 50, 60, 60, 60)', 'output': 'g3'} 105\n",
            "{'input': '(40, 50, 60, 60, 70)', 'output': 'g3'} 106\n",
            "{'input': '(40, 50, 60, 60, 80)', 'output': 'g3'} 107\n",
            "{'input': '(40, 50, 60, 60, 90)', 'output': 'g3'} 108\n",
            "{'input': '(40, 50, 60, 60, 100)', 'output': 'g3'} 109\n",
            "{'input': '(40, 50, 60, 70, 70)', 'output': 'g3'} 110\n",
            "{'input': '(40, 50, 60, 70, 80)', 'output': 'g3'} 111\n",
            "{'input': '(40, 50, 60, 70, 90)', 'output': 'g3'} 112\n",
            "{'input': '(40, 50, 60, 70, 100)', 'output': 'g3'} 113\n",
            "{'input': '(40, 50, 60, 80, 80)', 'output': 'g3'} 114\n",
            "{'input': '(40, 50, 60, 80, 90)', 'output': 'g3'} 115\n",
            "{'input': '(40, 50, 60, 80, 100)', 'output': 'g3'} 116\n",
            "{'input': '(40, 50, 60, 90, 90)', 'output': 'g3'} 117\n",
            "{'input': '(40, 50, 60, 90, 100)', 'output': 'g3'} 118\n",
            "{'input': '(40, 50, 60, 100, 100)', 'output': 'g3'} 119\n",
            "{'input': '(40, 50, 70, 70, 70)', 'output': 'g3'} 120\n",
            "{'input': '(40, 50, 70, 70, 80)', 'output': 'g3'} 121\n",
            "{'input': '(40, 50, 70, 70, 90)', 'output': 'g3'} 122\n",
            "{'input': '(40, 50, 70, 70, 100)', 'output': 'g3'} 123\n",
            "{'input': '(40, 50, 70, 80, 80)', 'output': 'g3'} 124\n",
            "{'input': '(40, 50, 70, 80, 90)', 'output': 'g3'} 125\n",
            "{'input': '(40, 50, 70, 80, 100)', 'output': 'g3'} 126\n",
            "{'input': '(40, 50, 70, 90, 90)', 'output': 'g3'} 127\n",
            "{'input': '(40, 50, 70, 90, 100)', 'output': 'g3'} 128\n",
            "{'input': '(40, 50, 70, 100, 100)', 'output': 'g3'} 129\n",
            "{'input': '(40, 50, 80, 80, 80)', 'output': 'g3'} 130\n",
            "{'input': '(40, 50, 80, 80, 90)', 'output': 'g3'} 131\n",
            "{'input': '(40, 50, 80, 80, 100)', 'output': 'g3'} 132\n",
            "{'input': '(40, 50, 80, 90, 90)', 'output': 'g3'} 133\n",
            "{'input': '(40, 50, 80, 90, 100)', 'output': 'g3'} 134\n",
            "{'input': '(40, 50, 80, 100, 100)', 'output': 'g3'} 135\n",
            "{'input': '(40, 50, 90, 90, 90)', 'output': 'g3'} 136\n",
            "{'input': '(40, 50, 90, 90, 100)', 'output': 'g3'} 137\n",
            "{'input': '(40, 50, 90, 100, 100)', 'output': 'g3'} 138\n",
            "{'input': '(40, 50, 100, 100, 100)', 'output': 'g3'} 139\n",
            "{'input': '(40, 60, 60, 60, 60)', 'output': 'g3'} 140\n",
            "{'input': '(40, 60, 60, 60, 70)', 'output': 'g3'} 141\n",
            "{'input': '(40, 60, 60, 60, 80)', 'output': 'g3'} 142\n",
            "{'input': '(40, 60, 60, 60, 90)', 'output': 'g3'} 143\n",
            "{'input': '(40, 60, 60, 60, 100)', 'output': 'g3'} 144\n",
            "{'input': '(40, 60, 60, 70, 70)', 'output': 'g3'} 145\n",
            "{'input': '(40, 60, 60, 70, 80)', 'output': 'g3'} 146\n",
            "{'input': '(40, 60, 60, 70, 90)', 'output': 'g3'} 147\n",
            "{'input': '(40, 60, 60, 70, 100)', 'output': 'g3'} 148\n",
            "{'input': '(40, 60, 60, 80, 80)', 'output': 'g3'} 149\n",
            "{'input': '(40, 60, 60, 80, 90)', 'output': 'g3'} 150\n",
            "{'input': '(40, 60, 60, 80, 100)', 'output': 'g3'} 151\n",
            "{'input': '(40, 60, 60, 90, 90)', 'output': 'g3'} 152\n",
            "{'input': '(40, 60, 60, 90, 100)', 'output': 'g3'} 153\n",
            "{'input': '(40, 60, 60, 100, 100)', 'output': 'g3'} 154\n",
            "{'input': '(40, 60, 70, 70, 70)', 'output': 'g3'} 155\n",
            "{'input': '(40, 60, 70, 70, 80)', 'output': 'g3'} 156\n",
            "{'input': '(40, 60, 70, 70, 90)', 'output': 'g3'} 157\n",
            "{'input': '(40, 60, 70, 70, 100)', 'output': 'g3'} 158\n",
            "{'input': '(40, 60, 70, 80, 80)', 'output': 'g3'} 159\n",
            "{'input': '(40, 60, 70, 80, 90)', 'output': 'g3'} 160\n",
            "{'input': '(40, 60, 70, 80, 100)', 'output': 'g3'} 161\n",
            "{'input': '(40, 60, 70, 90, 90)', 'output': 'g3'} 162\n",
            "{'input': '(40, 60, 70, 90, 100)', 'output': 'g3'} 163\n",
            "{'input': '(40, 60, 70, 100, 100)', 'output': 'g3'} 164\n",
            "{'input': '(40, 60, 80, 80, 80)', 'output': 'g3'} 165\n",
            "{'input': '(40, 60, 80, 80, 90)', 'output': 'g3'} 166\n",
            "{'input': '(40, 60, 80, 80, 100)', 'output': 'g3'} 167\n",
            "{'input': '(40, 60, 80, 90, 90)', 'output': 'g3'} 168\n",
            "{'input': '(40, 60, 80, 90, 100)', 'output': 'g3'} 169\n",
            "{'input': '(40, 60, 80, 100, 100)', 'output': 'g3'} 170\n",
            "{'input': '(40, 60, 90, 90, 90)', 'output': 'g3'} 171\n",
            "{'input': '(40, 60, 90, 90, 100)', 'output': 'g3'} 172\n",
            "{'input': '(40, 60, 90, 100, 100)', 'output': 'g3'} 173\n",
            "{'input': '(40, 60, 100, 100, 100)', 'output': 'g3'} 174\n",
            "{'input': '(40, 70, 70, 70, 70)', 'output': 'g3'} 175\n",
            "{'input': '(40, 70, 70, 70, 80)', 'output': 'g3'} 176\n",
            "{'input': '(40, 70, 70, 70, 90)', 'output': 'g3'} 177\n",
            "{'input': '(40, 70, 70, 70, 100)', 'output': 'g3'} 178\n",
            "{'input': '(40, 70, 70, 80, 80)', 'output': 'g3'} 179\n",
            "{'input': '(40, 70, 70, 80, 90)', 'output': 'g3'} 180\n",
            "{'input': '(40, 70, 70, 80, 100)', 'output': 'g3'} 181\n",
            "{'input': '(40, 70, 70, 90, 90)', 'output': 'g3'} 182\n",
            "{'input': '(40, 70, 70, 90, 100)', 'output': 'g3'} 183\n",
            "{'input': '(40, 70, 70, 100, 100)', 'output': 'g3'} 184\n",
            "{'input': '(40, 70, 80, 80, 80)', 'output': 'g3'} 185\n",
            "{'input': '(40, 70, 80, 80, 90)', 'output': 'g3'} 186\n",
            "{'input': '(40, 70, 80, 80, 100)', 'output': 'g3'} 187\n",
            "{'input': '(40, 70, 80, 90, 90)', 'output': 'g3'} 188\n",
            "{'input': '(40, 70, 80, 90, 100)', 'output': 'g3'} 189\n",
            "{'input': '(40, 70, 80, 100, 100)', 'output': 'g3'} 190\n",
            "{'input': '(40, 70, 90, 90, 90)', 'output': 'g3'} 191\n",
            "{'input': '(40, 70, 90, 90, 100)', 'output': 'g3'} 192\n",
            "{'input': '(40, 70, 90, 100, 100)', 'output': 'g3'} 193\n",
            "{'input': '(40, 70, 100, 100, 100)', 'output': 'g3'} 194\n",
            "{'input': '(40, 80, 80, 80, 80)', 'output': 'g3'} 195\n",
            "{'input': '(40, 80, 80, 80, 90)', 'output': 'g3'} 196\n",
            "{'input': '(40, 80, 80, 80, 100)', 'output': 'g3'} 197\n",
            "{'input': '(40, 80, 80, 90, 90)', 'output': 'g3'} 198\n",
            "{'input': '(40, 80, 80, 90, 100)', 'output': 'g3'} 199\n",
            "{'input': '(40, 80, 80, 100, 100)', 'output': 'g3'} 200\n",
            "{'input': '(40, 80, 90, 90, 90)', 'output': 'g3'} 201\n",
            "{'input': '(40, 80, 90, 90, 100)', 'output': 'g3'} 202\n",
            "{'input': '(40, 80, 90, 100, 100)', 'output': 'g3'} 203\n",
            "{'input': '(40, 80, 100, 100, 100)', 'output': 'g3'} 204\n",
            "{'input': '(40, 90, 90, 90, 90)', 'output': 'g2'} 205\n",
            "{'input': '(40, 90, 90, 90, 100)', 'output': 'g3'} 206\n",
            "{'input': '(40, 90, 90, 100, 100)', 'output': 'g2'} 207\n",
            "{'input': '(40, 90, 100, 100, 100)', 'output': 'g3'} 208\n",
            "{'input': '(40, 100, 100, 100, 100)', 'output': 'g2'} 209\n",
            "{'input': '(50, 50, 50, 50, 50)', 'output': 'g3'} 210\n",
            "{'input': '(50, 50, 50, 50, 60)', 'output': 'g3'} 211\n",
            "{'input': '(50, 50, 50, 50, 70)', 'output': 'g3'} 212\n",
            "{'input': '(50, 50, 50, 50, 80)', 'output': 'g3'} 213\n",
            "{'input': '(50, 50, 50, 50, 90)', 'output': 'g3'} 214\n",
            "{'input': '(50, 50, 50, 50, 100)', 'output': 'g3'} 215\n",
            "{'input': '(50, 50, 50, 60, 60)', 'output': 'g3'} 216\n",
            "{'input': '(50, 50, 50, 60, 70)', 'output': 'g3'} 217\n",
            "{'input': '(50, 50, 50, 60, 80)', 'output': 'g3'} 218\n",
            "{'input': '(50, 50, 50, 60, 90)', 'output': 'g3'} 219\n",
            "{'input': '(50, 50, 50, 60, 100)', 'output': 'g3'} 220\n",
            "{'input': '(50, 50, 50, 70, 70)', 'output': 'g3'} 221\n",
            "{'input': '(50, 50, 50, 70, 80)', 'output': 'g3'} 222\n",
            "{'input': '(50, 50, 50, 70, 90)', 'output': 'g3'} 223\n",
            "{'input': '(50, 50, 50, 70, 100)', 'output': 'g3'} 224\n",
            "{'input': '(50, 50, 50, 80, 80)', 'output': 'g3'} 225\n",
            "{'input': '(50, 50, 50, 80, 90)', 'output': 'g3'} 226\n",
            "{'input': '(50, 50, 50, 80, 100)', 'output': 'g3'} 227\n",
            "{'input': '(50, 50, 50, 90, 90)', 'output': 'g3'} 228\n",
            "{'input': '(50, 50, 50, 90, 100)', 'output': 'g3'} 229\n",
            "{'input': '(50, 50, 50, 100, 100)', 'output': 'g3'} 230\n",
            "{'input': '(50, 50, 60, 60, 60)', 'output': 'g3'} 231\n",
            "{'input': '(50, 50, 60, 60, 70)', 'output': 'g3'} 232\n",
            "{'input': '(50, 50, 60, 60, 80)', 'output': 'g3'} 233\n",
            "{'input': '(50, 50, 60, 60, 90)', 'output': 'g3'} 234\n",
            "{'input': '(50, 50, 60, 60, 100)', 'output': 'g3'} 235\n",
            "{'input': '(50, 50, 60, 70, 70)', 'output': 'g3'} 236\n",
            "{'input': '(50, 50, 60, 70, 80)', 'output': 'g3'} 237\n",
            "{'input': '(50, 50, 60, 70, 90)', 'output': 'g3'} 238\n",
            "{'input': '(50, 50, 60, 70, 100)', 'output': 'g3'} 239\n",
            "{'input': '(50, 50, 60, 80, 80)', 'output': 'g3'} 240\n",
            "{'input': '(50, 50, 60, 80, 90)', 'output': 'g3'} 241\n",
            "{'input': '(50, 50, 60, 80, 100)', 'output': 'g3'} 242\n",
            "{'input': '(50, 50, 60, 90, 90)', 'output': 'g3'} 243\n",
            "{'input': '(50, 50, 60, 90, 100)', 'output': 'g3'} 244\n",
            "{'input': '(50, 50, 60, 100, 100)', 'output': 'g3'} 245\n",
            "{'input': '(50, 50, 70, 70, 70)', 'output': 'g3'} 246\n",
            "{'input': '(50, 50, 70, 70, 80)', 'output': 'g3'} 247\n",
            "{'input': '(50, 50, 70, 70, 90)', 'output': 'g3'} 248\n",
            "{'input': '(50, 50, 70, 70, 100)', 'output': 'g3'} 249\n",
            "{'input': '(50, 50, 70, 80, 80)', 'output': 'g3'} 250\n",
            "{'input': '(50, 50, 70, 80, 90)', 'output': 'g3'} 251\n",
            "{'input': '(50, 50, 70, 80, 100)', 'output': 'g3'} 252\n",
            "{'input': '(50, 50, 70, 90, 90)', 'output': 'g3'} 253\n",
            "{'input': '(50, 50, 70, 90, 100)', 'output': 'g3'} 254\n",
            "{'input': '(50, 50, 70, 100, 100)', 'output': 'g3'} 255\n",
            "{'input': '(50, 50, 80, 80, 80)', 'output': 'g3'} 256\n",
            "{'input': '(50, 50, 80, 80, 90)', 'output': 'g3'} 257\n",
            "{'input': '(50, 50, 80, 80, 100)', 'output': 'g3'} 258\n",
            "{'input': '(50, 50, 80, 90, 90)', 'output': 'g3'} 259\n",
            "{'input': '(50, 50, 80, 90, 100)', 'output': 'g3'} 260\n",
            "{'input': '(50, 50, 80, 100, 100)', 'output': 'g3'} 261\n",
            "{'input': '(50, 50, 90, 90, 90)', 'output': 'g3'} 262\n",
            "{'input': '(50, 50, 90, 90, 100)', 'output': 'g3'} 263\n",
            "{'input': '(50, 50, 90, 100, 100)', 'output': 'g3'} 264\n",
            "{'input': '(50, 50, 100, 100, 100)', 'output': 'g3'} 265\n",
            "{'input': '(50, 60, 60, 60, 60)', 'output': 'g3'} 266\n",
            "{'input': '(50, 60, 60, 60, 70)', 'output': 'g3'} 267\n",
            "{'input': '(50, 60, 60, 60, 80)', 'output': 'g3'} 268\n",
            "{'input': '(50, 60, 60, 60, 90)', 'output': 'g3'} 269\n",
            "{'input': '(50, 60, 60, 60, 100)', 'output': 'g3'} 270\n",
            "{'input': '(50, 60, 60, 70, 70)', 'output': 'g3'} 271\n",
            "{'input': '(50, 60, 60, 70, 80)', 'output': 'g3'} 272\n",
            "{'input': '(50, 60, 60, 70, 90)', 'output': 'g3'} 273\n",
            "{'input': '(50, 60, 60, 70, 100)', 'output': 'g3'} 274\n",
            "{'input': '(50, 60, 60, 80, 80)', 'output': 'g3'} 275\n",
            "{'input': '(50, 60, 60, 80, 90)', 'output': 'g3'} 276\n",
            "{'input': '(50, 60, 60, 80, 100)', 'output': 'g3'} 277\n",
            "{'input': '(50, 60, 60, 90, 90)', 'output': 'g3'} 278\n",
            "{'input': '(50, 60, 60, 90, 100)', 'output': 'g3'} 279\n",
            "{'input': '(50, 60, 60, 100, 100)', 'output': 'g3'} 280\n",
            "{'input': '(50, 60, 70, 70, 70)', 'output': 'g3'} 281\n",
            "{'input': '(50, 60, 70, 70, 80)', 'output': 'g3'} 282\n",
            "{'input': '(50, 60, 70, 70, 90)', 'output': 'g3'} 283\n",
            "{'input': '(50, 60, 70, 70, 100)', 'output': 'g3'} 284\n",
            "{'input': '(50, 60, 70, 80, 80)', 'output': 'g3'} 285\n",
            "{'input': '(50, 60, 70, 80, 90)', 'output': 'g3'} 286\n",
            "{'input': '(50, 60, 70, 80, 100)', 'output': 'g3'} 287\n",
            "{'input': '(50, 60, 70, 90, 90)', 'output': 'g3'} 288\n",
            "{'input': '(50, 60, 70, 90, 100)', 'output': 'g3'} 289\n",
            "{'input': '(50, 60, 70, 100, 100)', 'output': 'g3'} 290\n",
            "{'input': '(50, 60, 80, 80, 80)', 'output': 'g3'} 291\n",
            "{'input': '(50, 60, 80, 80, 90)', 'output': 'g3'} 292\n",
            "{'input': '(50, 60, 80, 80, 100)', 'output': 'g3'} 293\n",
            "{'input': '(50, 60, 80, 90, 90)', 'output': 'g3'} 294\n",
            "{'input': '(50, 60, 80, 90, 100)', 'output': 'g3'} 295\n",
            "{'input': '(50, 60, 80, 100, 100)', 'output': 'g3'} 296\n",
            "{'input': '(50, 60, 90, 90, 90)', 'output': 'g3'} 297\n",
            "{'input': '(50, 60, 90, 90, 100)', 'output': 'g3'} 298\n",
            "{'input': '(50, 60, 90, 100, 100)', 'output': 'g3'} 299\n",
            "{'input': '(50, 60, 100, 100, 100)', 'output': 'g3'} 300\n",
            "{'input': '(50, 70, 70, 70, 70)', 'output': 'g3'} 301\n",
            "{'input': '(50, 70, 70, 70, 80)', 'output': 'g3'} 302\n",
            "{'input': '(50, 70, 70, 70, 90)', 'output': 'g3'} 303\n",
            "{'input': '(50, 70, 70, 70, 100)', 'output': 'g3'} 304\n",
            "{'input': '(50, 70, 70, 80, 80)', 'output': 'g3'} 305\n",
            "{'input': '(50, 70, 70, 80, 90)', 'output': 'g3'} 306\n",
            "{'input': '(50, 70, 70, 80, 100)', 'output': 'g3'} 307\n",
            "{'input': '(50, 70, 70, 90, 90)', 'output': 'g3'} 308\n",
            "{'input': '(50, 70, 70, 90, 100)', 'output': 'g3'} 309\n",
            "{'input': '(50, 70, 70, 100, 100)', 'output': 'g3'} 310\n",
            "{'input': '(50, 70, 80, 80, 80)', 'output': 'g3'} 311\n",
            "{'input': '(50, 70, 80, 80, 90)', 'output': 'g3'} 312\n",
            "{'input': '(50, 70, 80, 80, 100)', 'output': 'g3'} 313\n",
            "{'input': '(50, 70, 80, 90, 90)', 'output': 'g3'} 314\n",
            "{'input': '(50, 70, 80, 90, 100)', 'output': 'g3'} 315\n",
            "{'input': '(50, 70, 80, 100, 100)', 'output': 'g3'} 316\n",
            "{'input': '(50, 70, 90, 90, 90)', 'output': 'g3'} 317\n",
            "{'input': '(50, 70, 90, 90, 100)', 'output': 'g3'} 318\n",
            "{'input': '(50, 70, 90, 100, 100)', 'output': 'g3'} 319\n",
            "{'input': '(50, 70, 100, 100, 100)', 'output': 'g3'} 320\n",
            "{'input': '(50, 80, 80, 80, 80)', 'output': 'g2'} 321\n",
            "{'input': '(50, 80, 80, 80, 90)', 'output': 'g2'} 322\n",
            "{'input': '(50, 80, 80, 80, 100)', 'output': 'g3'} 323\n",
            "{'input': '(50, 80, 80, 90, 90)', 'output': 'g2'} 324\n",
            "{'input': '(50, 80, 80, 90, 100)', 'output': 'g2'} 325\n",
            "{'input': '(50, 80, 80, 100, 100)', 'output': 'g2'} 326\n",
            "{'input': '(50, 80, 90, 90, 90)', 'output': 'g2'} 327\n",
            "{'input': '(50, 80, 90, 90, 100)', 'output': 'g2'} 328\n",
            "{'input': '(50, 80, 90, 100, 100)', 'output': 'g2'} 329\n",
            "{'input': '(50, 80, 100, 100, 100)', 'output': 'g2'} 330\n",
            "{'input': '(50, 90, 90, 90, 90)', 'output': 'g2'} 331\n",
            "{'input': '(50, 90, 90, 90, 100)', 'output': 'g2'} 332\n",
            "{'input': '(50, 90, 90, 100, 100)', 'output': 'g2'} 333\n",
            "{'input': '(50, 90, 100, 100, 100)', 'output': 'g2'} 334\n",
            "{'input': '(50, 100, 100, 100, 100)', 'output': 'g2'} 335\n",
            "{'input': '(60, 60, 60, 60, 60)', 'output': 'g3'} 336\n",
            "{'input': '(60, 60, 60, 60, 70)', 'output': 'g3'} 337\n",
            "{'input': '(60, 60, 60, 60, 80)', 'output': 'g3'} 338\n",
            "{'input': '(60, 60, 60, 60, 90)', 'output': 'g3'} 339\n",
            "{'input': '(60, 60, 60, 60, 100)', 'output': 'g3'} 340\n",
            "{'input': '(60, 60, 60, 70, 70)', 'output': 'g3'} 341\n",
            "{'input': '(60, 60, 60, 70, 80)', 'output': 'g3'} 342\n",
            "{'input': '(60, 60, 60, 70, 90)', 'output': 'g3'} 343\n",
            "{'input': '(60, 60, 60, 70, 100)', 'output': 'g3'} 344\n",
            "{'input': '(60, 60, 60, 80, 80)', 'output': 'g3'} 345\n",
            "{'input': '(60, 60, 60, 80, 90)', 'output': 'g3'} 346\n",
            "{'input': '(60, 60, 60, 80, 100)', 'output': 'g3'} 347\n",
            "{'input': '(60, 60, 60, 90, 90)', 'output': 'g3'} 348\n",
            "{'input': '(60, 60, 60, 90, 100)', 'output': 'g3'} 349\n",
            "{'input': '(60, 60, 60, 100, 100)', 'output': 'g3'} 350\n",
            "{'input': '(60, 60, 70, 70, 70)', 'output': 'g3'} 351\n",
            "{'input': '(60, 60, 70, 70, 80)', 'output': 'g3'} 352\n",
            "{'input': '(60, 60, 70, 70, 90)', 'output': 'g3'} 353\n",
            "{'input': '(60, 60, 70, 70, 100)', 'output': 'g3'} 354\n",
            "{'input': '(60, 60, 70, 80, 80)', 'output': 'g3'} 355\n",
            "{'input': '(60, 60, 70, 80, 90)', 'output': 'g3'} 356\n",
            "{'input': '(60, 60, 70, 80, 100)', 'output': 'g3'} 357\n",
            "{'input': '(60, 60, 70, 90, 90)', 'output': 'g3'} 358\n",
            "{'input': '(60, 60, 70, 90, 100)', 'output': 'g3'} 359\n",
            "{'input': '(60, 60, 70, 100, 100)', 'output': 'g3'} 360\n",
            "{'input': '(60, 60, 80, 80, 80)', 'output': 'g3'} 361\n",
            "{'input': '(60, 60, 80, 80, 90)', 'output': 'g3'} 362\n",
            "{'input': '(60, 60, 80, 80, 100)', 'output': 'g3'} 363\n",
            "{'input': '(60, 60, 80, 90, 90)', 'output': 'g3'} 364\n",
            "{'input': '(60, 60, 80, 90, 100)', 'output': 'g3'} 365\n",
            "{'input': '(60, 60, 80, 100, 100)', 'output': 'g3'} 366\n",
            "{'input': '(60, 60, 90, 90, 90)', 'output': 'g3'} 367\n",
            "{'input': '(60, 60, 90, 90, 100)', 'output': 'g3'} 368\n",
            "{'input': '(60, 60, 90, 100, 100)', 'output': 'g3'} 369\n",
            "{'input': '(60, 60, 100, 100, 100)', 'output': 'g3'} 370\n",
            "{'input': '(60, 70, 70, 70, 70)', 'output': 'g3'} 371\n",
            "{'input': '(60, 70, 70, 70, 80)', 'output': 'g3'} 372\n",
            "{'input': '(60, 70, 70, 70, 90)', 'output': 'g3'} 373\n",
            "{'input': '(60, 70, 70, 70, 100)', 'output': 'g3'} 374\n",
            "{'input': '(60, 70, 70, 80, 80)', 'output': 'g3'} 375\n",
            "{'input': '(60, 70, 70, 80, 90)', 'output': 'g3'} 376\n",
            "{'input': '(60, 70, 70, 80, 100)', 'output': 'g3'} 377\n",
            "{'input': '(60, 70, 70, 90, 90)', 'output': 'g3'} 378\n",
            "{'input': '(60, 70, 70, 90, 100)', 'output': 'g3'} 379\n",
            "{'input': '(60, 70, 70, 100, 100)', 'output': 'g3'} 380\n",
            "{'input': '(60, 70, 80, 80, 80)', 'output': 'g2'} 381\n",
            "{'input': '(60, 70, 80, 80, 90)', 'output': 'g2'} 382\n",
            "{'input': '(60, 70, 80, 80, 100)', 'output': 'g3'} 383\n",
            "{'input': '(60, 70, 80, 90, 90)', 'output': 'g2'} 384\n",
            "{'input': '(60, 70, 80, 90, 100)', 'output': 'g3'} 385\n",
            "{'input': '(60, 70, 80, 100, 100)', 'output': 'g2'} 386\n",
            "{'input': '(60, 70, 90, 90, 90)', 'output': 'g2'} 387\n",
            "{'input': '(60, 70, 90, 90, 100)', 'output': 'g'} 388\n",
            "{'input': '(60, 70, 90, 100, 100)', 'output': 'g'} 389\n",
            "{'input': '(60, 70, 100, 100, 100)', 'output': 'g3'} 390\n",
            "{'input': '(60, 80, 80, 80, 80)', 'output': 'g2'} 391\n",
            "{'input': '(60, 80, 80, 80, 90)', 'output': 'g2'} 392\n",
            "{'input': '(60, 80, 80, 80, 100)', 'output': 'g2'} 393\n",
            "{'input': '(60, 80, 80, 90, 90)', 'output': 'g2'} 394\n",
            "{'input': '(60, 80, 80, 90, 100)', 'output': 'g2'} 395\n",
            "{'input': '(60, 80, 80, 100, 100)', 'output': 'g2'} 396\n",
            "{'input': '(60, 80, 90, 90, 90)', 'output': 'g2'} 397\n",
            "{'input': '(60, 80, 90, 90, 100)', 'output': 'g2'} 398\n",
            "{'input': '(60, 80, 90, 100, 100)', 'output': 'g2'} 399\n",
            "{'input': '(60, 80, 100, 100, 100)', 'output': 'g2'} 400\n",
            "{'input': '(60, 90, 90, 90, 90)', 'output': 'g2'} 401\n",
            "{'input': '(60, 90, 90, 90, 100)', 'output': 'g2'} 402\n",
            "{'input': '(60, 90, 90, 100, 100)', 'output': 'g2'} 403\n",
            "{'input': '(60, 90, 100, 100, 100)', 'output': 'g2'} 404\n",
            "{'input': '(60, 100, 100, 100, 100)', 'output': 'g2'} 405\n",
            "{'input': '(70, 70, 70, 70, 70)', 'output': 'g2'} 406\n",
            "{'input': '(70, 70, 70, 70, 80)', 'output': 'g2'} 407\n",
            "{'input': '(70, 70, 70, 70, 90)', 'output': 'g2'} 408\n",
            "{'input': '(70, 70, 70, 70, 100)', 'output': 'g3'} 409\n",
            "{'input': '(70, 70, 70, 80, 80)', 'output': 'g2'} 410\n",
            "{'input': '(70, 70, 70, 80, 90)', 'output': 'g2'} 411\n",
            "{'input': '(70, 70, 70, 80, 100)', 'output': 'g2'} 412\n",
            "{'input': '(70, 70, 70, 90, 90)', 'output': 'g2'} 413\n",
            "{'input': '(70, 70, 70, 90, 100)', 'output': 'g2'} 414\n",
            "{'input': '(70, 70, 70, 100, 100)', 'output': 'g2'} 415\n",
            "{'input': '(70, 70, 80, 80, 80)', 'output': 'g2'} 416\n",
            "{'input': '(70, 70, 80, 80, 90)', 'output': 'g2'} 417\n",
            "{'input': '(70, 70, 80, 80, 100)', 'output': 'g2'} 418\n",
            "{'input': '(70, 70, 80, 90, 90)', 'output': 'g2'} 419\n",
            "{'input': '(70, 70, 80, 90, 100)', 'output': 'g2'} 420\n",
            "{'input': '(70, 70, 80, 100, 100)', 'output': 'g2'} 421\n",
            "{'input': '(70, 70, 90, 90, 90)', 'output': 'g2'} 422\n",
            "{'input': '(70, 70, 90, 90, 100)', 'output': 'g2'} 423\n",
            "{'input': '(70, 70, 90, 100, 100)', 'output': 'g'} 424\n",
            "{'input': '(70, 70, 100, 100, 100)', 'output': 'g2'} 425\n",
            "{'input': '(70, 80, 80, 80, 80)', 'output': 'g2'} 426\n",
            "{'input': '(70, 80, 80, 80, 90)', 'output': 'g2'} 427\n",
            "{'input': '(70, 80, 80, 80, 100)', 'output': 'g2'} 428\n",
            "{'input': '(70, 80, 80, 90, 90)', 'output': 'g2'} 429\n",
            "{'input': '(70, 80, 80, 90, 100)', 'output': 'g2'} 430\n",
            "{'input': '(70, 80, 80, 100, 100)', 'output': 'g2'} 431\n",
            "{'input': '(70, 80, 90, 90, 90)', 'output': 'g2'} 432\n",
            "{'input': '(70, 80, 90, 90, 100)', 'output': 'g2'} 433\n",
            "{'input': '(70, 80, 90, 100, 100)', 'output': 'g2'} 434\n",
            "{'input': '(70, 80, 100, 100, 100)', 'output': 'g2'} 435\n",
            "{'input': '(70, 90, 90, 90, 90)', 'output': 'g2'} 436\n",
            "{'input': '(70, 90, 90, 90, 100)', 'output': 'g2'} 437\n",
            "{'input': '(70, 90, 90, 100, 100)', 'output': 'g2'} 438\n",
            "{'input': '(70, 90, 100, 100, 100)', 'output': 'g2'} 439\n",
            "{'input': '(70, 100, 100, 100, 100)', 'output': 'g2'} 440\n",
            "{'input': '(80, 80, 80, 80, 80)', 'output': 'g2'} 441\n",
            "{'input': '(80, 80, 80, 80, 90)', 'output': 'g2'} 442\n",
            "{'input': '(80, 80, 80, 80, 100)', 'output': 'g2'} 443\n",
            "{'input': '(80, 80, 80, 90, 90)', 'output': 'g2'} 444\n",
            "{'input': '(80, 80, 80, 90, 100)', 'output': 'g2'} 445\n",
            "{'input': '(80, 80, 80, 100, 100)', 'output': 'g2'} 446\n",
            "{'input': '(80, 80, 90, 90, 90)', 'output': 'g2'} 447\n",
            "{'input': '(80, 80, 90, 90, 100)', 'output': 'g2'} 448\n",
            "{'input': '(80, 80, 90, 100, 100)', 'output': 'g2'} 449\n",
            "{'input': '(80, 80, 100, 100, 100)', 'output': 'g1'} 450\n",
            "{'input': '(80, 90, 90, 90, 90)', 'output': 'g2'} 451\n",
            "{'input': '(80, 90, 90, 90, 100)', 'output': 'g1'} 452\n",
            "{'input': '(80, 90, 90, 100, 100)', 'output': 'g1'} 453\n",
            "{'input': '(80, 90, 100, 100, 100)', 'output': 'g1'} 454\n",
            "{'input': '(80, 100, 100, 100, 100)', 'output': 'g1'} 455\n",
            "{'input': '(90, 90, 90, 90, 90)', 'output': 'g1'} 456\n",
            "{'input': '(90, 90, 90, 90, 100)', 'output': 'g1'} 457\n",
            "{'input': '(90, 90, 90, 100, 100)', 'output': 'g1'} 458\n",
            "{'input': '(90, 90, 100, 100, 100)', 'output': 'g1'} 459\n",
            "{'input': '(90, 100, 100, 100, 100)', 'output': 'g1'} 460\n",
            "{'input': '(100, 100, 100, 100, 100)', 'output': 'g1'} 461\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-SI805mnxOOr",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "json = json.dumps(dlist)\n",
        "f = open(\"clg_list.json\",\"w\")\n",
        "f.write(json)\n",
        "f.close()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J3UsPu37dtn5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from google.colab import files\n",
        "files.download('clg_list.json') "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ni77VBZXyq1K",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas as pd \n",
        "import json\n",
        "dict={}\n",
        "dlist=[]\n",
        "data = pd.read_csv(\"10th-naivebayes.csv\") \n",
        "X=data.iloc[:,:-1]\n",
        "y= data.iloc[:,-1]\n",
        "from sklearn.model_selection import train_test_split \n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=2)\n",
        "from sklearn.naive_bayes import GaussianNB \n",
        "\n",
        "gnb = GaussianNB() \n",
        "gnb.fit(X_train, y_train) \n",
        "y_pred = gnb.predict(X_test) \n",
        "from sklearn import metrics \n",
        "\n",
        "\n",
        "count=0\n",
        "# A Python program to print all combinations \n",
        "# with an element-to-itself combination is  \n",
        "# also included \n",
        "from itertools import combinations_with_replacement \n",
        "  \n",
        "\n",
        "import itertools\n",
        "x = [40,50,60,70,80,90,100]\n",
        "result=[p for p in itertools.product(x, repeat=5)]\n",
        "\n",
        "\n",
        "# Get all combinations of [1, 2, 3] and length 2 \n",
        "#comb = combinations_with_replacement([40,50, 60,70,80,90,100], 5) # Print the obtained combinations \n",
        "#for marks in list(comb): \n",
        "for item in result:\n",
        "  y_pred = gnb.predict([item])\n",
        "  dict.update([ ('input', str(item)) , ('output', y_pred[0])] )\n",
        "  dlist.append(dict)\n",
        "  print(dict,count)\n",
        "  count=count+1\n",
        "  dict={}"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}